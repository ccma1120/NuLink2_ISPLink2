<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\HSUSBD_Mass_Storage_DataFlash.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\HSUSBD_Mass_Storage_DataFlash.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Mon Aug 12 19:25:36 2019
<BR><P>
<H3>Maximum Stack Usage =       1984 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ISP_FLOW &rArr; Read_DATAFLASH_INFORMATION &rArr; GET_FILE_CHECKSUM &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[f]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[34]">ADC00_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[35]">ADC01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[37]">ADC02_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[38]">ADC03_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[53]">BPWM0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[54]">BPWM1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[40]">CAN0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[41]">CAN1_IRQHandler</a> from hal_can_isp.o(i.CAN1_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[7c]">CAN_Config</a> from isp_can_bus.o(i.CAN_Config) referenced from isp_driver.o(.data)
 <LI><a href="#[74]">CAN_READ</a> from isp_can_bus.o(i.CAN_READ) referenced from isp_driver.o(.constdata)
 <LI><a href="#[73]">CAN_WRITE</a> from isp_can_bus.o(i.CAN_WRITE) referenced from isp_driver.o(.constdata)
 <LI><a href="#[e]">CKFAIL_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4c]">CRYPTO_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[67]">CmdFWVersion</a> from isp_cmd.o(i.CmdFWVersion) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[6a]">CmdGetConfig</a> from isp_cmd.o(i.CmdGetConfig) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[68]">CmdGetDeviceID</a> from isp_cmd.o(i.CmdGetDeviceID) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[69]">CmdGetFlashMode</a> from isp_cmd.o(i.CmdGetFlashMode) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[6d]">CmdRunAPROM</a> from isp_cmd.o(i.CmdRunAPROM) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[6c]">CmdRunLDROM</a> from isp_cmd.o(i.CmdRunLDROM) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[66]">CmdSyncPackno</a> from isp_cmd.o(i.CmdSyncPackno) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[6b]">CmdUpdateConfig</a> from isp_cmd.o(i.CmdUpdateConfig) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[f]">Default_Handler</a> from startup_m480.o(.text) referenced 9 times from startup_m480.o(RESET)
 <LI><a href="#[59]">ECAP0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5a]">ECAP1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5e]">EHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4e]">EINT6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5c]">EINT7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[49]">EMAC_RX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[48]">EMAC_TX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23]">EPWM0P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[24]">EPWM0P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[25]">EPWM0P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[27]">EPWM1P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[28]">EPWM1P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[29]">EPWM1P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from main.o(i.GPC_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4d]">GPG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5b]">GPH_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[61]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[56]">I2C2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7e]">I2C_Config</a> from isp_i2c_bus.o(i.I2C_Config) referenced from isp_driver.o(.data)
 <LI><a href="#[78]">I2C_READ</a> from isp_i2c_bus.o(i.I2C_READ) referenced from isp_driver.o(.constdata)
 <LI><a href="#[77]">I2C_WRITE</a> from isp_i2c_bus.o(i.I2C_WRITE) referenced from isp_driver.o(.constdata)
 <LI><a href="#[4a]">I2S0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[72]">ISP_UART_READ</a> from isp_uart_bus.o(i.ISP_UART_READ) referenced from isp_driver.o(.constdata)
 <LI><a href="#[71]">ISP_UART_WRITE</a> from isp_uart_bus.o(i.ISP_UART_WRITE) referenced from isp_driver.o(.constdata)
 <LI><a href="#[70]">MSC_ClassRequest</a> from massstorage.o(i.MSC_ClassRequest) referenced from main.o(i.main)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3e]">OHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4b]">OPA0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[32]">PDMA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[57]">QEI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[58]">QEI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[20]">QSPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7f]">RS485_Config</a> from isp_rs485_bus.o(i.RS485_Config) referenced from isp_driver.o(.data)
 <LI><a href="#[7a]">RS485_READ</a> from isp_rs485_bus.o(i.RS485_READ) referenced from isp_driver.o(.constdata)
 <LI><a href="#[79]">RS485_WRITE</a> from isp_rs485_bus.o(i.RS485_WRITE) referenced from isp_driver.o(.constdata)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[80]">Reset_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[42]">SC0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[43]">SC1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[44]">SC2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[46]">SDH0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5d]">SDH1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[55]">SPIM_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7d]">SPI_Config</a> from isp_spi_bus.o(i.SPI_Config) referenced from isp_driver.o(.data)
 <LI><a href="#[76]">SPI_READ</a> from isp_spi_bus.o(i.SPI_READ) referenced from isp_driver.o(.constdata)
 <LI><a href="#[75]">SPI_WRITE</a> from isp_spi_bus.o(i.SPI_WRITE) referenced from isp_driver.o(.constdata)
 <LI><a href="#[6]">SVC_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_m480.o(i.SystemInit) referenced from startup_m480.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from hal_rs485.o(i.UART1_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from isp_uart_bus.o(i.UART2_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7b]">UART_Config</a> from isp_uart_bus.o(i.UART_Config) referenced from isp_driver.o(.data)
 <LI><a href="#[47]">USBD20_IRQHandler</a> from massstorage.o(i.USBD20_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[3d]">USBD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5f]">USBOTG20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3f]">USBOTG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[51]">USCI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[52]">USCI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6f]">UpdatedTargetFalsh</a> from isp_cmd.o(i.UpdatedTargetFalsh) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[63]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m480.o(.text)
 <LI><a href="#[65]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6e]">auto_detect_command</a> from isp_cmd.o(i.auto_detect_command) referenced from isp_cmd.o(i.init_ISP_command)
 <LI><a href="#[64]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[60]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[88]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m480.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>UART_ClearIntFlag</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>UART_Close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>UART_DisableFlowCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>UART_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>UART_EnableFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>UART_Open</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>UART_Read</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>UART_SetLineConfig</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[184]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>UART_SelectIrDAMode</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[185]"></a>UART_SelectRS485Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>UART_SelectLINMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>UART_Write</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableCKO
</UL>

<P><STRONG><a name="[8e]"></a>CLK_DisableCKO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>

<P><STRONG><a name="[92]"></a>CLK_SetModuleClock</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
</UL>

<P><STRONG><a name="[91]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
</UL>

<P><STRONG><a name="[90]"></a>CLK_EnableCKO</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>

<P><STRONG><a name="[188]"></a>CLK_PowerDown</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>CLK_Idle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[95]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[96]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[97]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[99]"></a>CLK_WaitClockReady</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPowerDownMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[98]"></a>CLK_SetHCLK</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[8b]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SelectIrDAMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
</UL>

<P><STRONG><a name="[9b]"></a>CLK_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[9a]"></a>CLK_EnablePLL</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[9c]"></a>CLK_SetCoreClock</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[18b]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[18c]"></a>CLK_DisableXtalRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>CLK_EnableSysTick</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>CLK_DisableSysTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>CLK_SetPowerDownMode</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>

<P><STRONG><a name="[18f]"></a>CLK_EnableDPDWKPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>CLK_GetPMUWKSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>CLK_EnableSPDWKPin</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>CLK_GetModuleClockSource</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>CLK_GetModuleClockDivider</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>GPIO_SetMode</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_GetDesignID
</UL>

<P><STRONG><a name="[173]"></a>GPIO_EnableInt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>GPIO_DisableInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>GPIO_SetSlewCtl</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>GPIO_SetPullCtl</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>Voltage_GetDesignID</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Voltage_GetDesignID &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Init
</UL>

<P><STRONG><a name="[a0]"></a>Voltage_SupplyTargetPower</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Voltage_SupplyTargetPower &rArr; EasyScale::SendCmd(unsigned char) &rArr; EasyScale::WriteByte(unsigned char) &rArr; EasyScale::WriteLogic0()
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::SendCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Voltage_ShutDownAllPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, voltage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Init
</UL>

<P><STRONG><a name="[a2]"></a>Voltage_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Voltage_Init &rArr; Voltage_SupplyTargetPower &rArr; EasyScale::SendCmd(unsigned char) &rArr; EasyScale::WriteByte(unsigned char) &rArr; EasyScale::WriteLogic0()
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_SupplyTargetPower
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_ShutDownAllPin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_GetDesignID
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>Voltage_OpenPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, voltage.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>EasyScale::WriteEOS()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, easyscale.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::SendCmd(unsigned char)
</UL>

<P><STRONG><a name="[a6]"></a>EasyScale::WriteLogic1()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, easyscale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EasyScale::WriteLogic1()
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteByte(unsigned char)
</UL>

<P><STRONG><a name="[a7]"></a>EasyScale::WriteLogic0()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, easyscale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EasyScale::WriteLogic0()
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteByte(unsigned char)
</UL>

<P><STRONG><a name="[a8]"></a>EasyScale::WriteByte(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, easyscale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EasyScale::WriteByte(unsigned char) &rArr; EasyScale::WriteLogic0()
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteLogic0()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteLogic1()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::SendCmd(unsigned char)
</UL>

<P><STRONG><a name="[a9]"></a>EasyScale::WriteStart()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, easyscale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EasyScale::WriteStart()
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::SendCmd(unsigned char)
</UL>

<P><STRONG><a name="[a1]"></a>EasyScale::SendCmd(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, easyscale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EasyScale::SendCmd(unsigned char) &rArr; EasyScale::WriteByte(unsigned char) &rArr; EasyScale::WriteLogic0()
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteStart()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteByte(unsigned char)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteEOS()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_SupplyTargetPower
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SN_INFORMATION
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_INTERFACE
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CONFIG_SDCARD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_detect_command
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUpdateConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSyncPackno
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunLDROM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunAPROM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetFlashMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetDeviceID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFWVersion
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SN_INFORMATION
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_INTERFACE
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CONFIG_SDCARD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
</UL>

<P><STRONG><a name="[b0]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SN_INFORMATION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CONFIG_SDCARD
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_dmul</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_f2d</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
</UL>

<P><STRONG><a name="[61]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[83]"></a>kbhit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[84]"></a>IsDebugFifoEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[85]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[64]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[86]"></a>fgetc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[87]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[19d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[19e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[19f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[b3]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[1a0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1a1]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b5]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_dadd</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[f7]"></a>Auto_Detect_Connect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isp_cmd.o(i.Auto_Detect_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Auto_Detect_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[41]"></a>CAN1_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_can_isp.o(i.CAN1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CAN1_IRQHandler &rArr; CAN_MsgInterrupt &rArr; CAN_Receive &rArr; CAN_ReadMsgObj &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CLR_INT_PENDING_BIT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>CAN_BasicReceiveMsg</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, can.o(i.CAN_BasicReceiveMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_BasicReceiveMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[d5]"></a>CAN_BasicSendMsg</STRONG> (Thumb, 200 bytes, Stack size 12 bytes, can.o(i.CAN_BasicSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_BasicSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[c3]"></a>CAN_CLR_INT_PENDING_BIT</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, can.o(i.CAN_CLR_INT_PENDING_BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_CLR_INT_PENDING_BIT &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseIF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockIF_TL
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>CAN_Config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_can_bus.o(i.CAN_Config))
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>CAN_EnableInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.CAN_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[d0]"></a>CAN_EnterInitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can.o(i.CAN_EnterInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[c6]"></a>CAN_Init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, hal_can_isp.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN_Init &rArr; CAN_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_Bridge_Init
</UL>

<P><STRONG><a name="[ce]"></a>CAN_IsNewDataReceived</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, can.o(i.CAN_IsNewDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_IsNewDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
</UL>

<P><STRONG><a name="[d2]"></a>CAN_LeaveInitMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, can.o(i.CAN_LeaveInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[c2]"></a>CAN_MsgInterrupt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_can_isp.o(i.CAN_MsgInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CAN_MsgInterrupt &rArr; CAN_Receive &rArr; CAN_ReadMsgObj &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>CAN_Package_Tx</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, hal_can_isp.o(i.CAN_Package_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CAN_Package_Tx &rArr; CAN_Transmit &rArr; CAN_TriggerTxMsg &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_ISP
</UL>

<P><STRONG><a name="[74]"></a>CAN_READ</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, isp_can_bus.o(i.CAN_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_READ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>CAN_ReadMsgObj</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, can.o(i.CAN_ReadMsgObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CAN_ReadMsgObj &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsNewDataReceived
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseIF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockIF_TL
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[ca]"></a>CAN_Receive</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_Receive &rArr; CAN_ReadMsgObj &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BasicReceiveMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
</UL>

<P><STRONG><a name="[c7]"></a>CAN_SetBaudRate</STRONG> (Thumb, 486 bytes, Stack size 96 bytes, can.o(i.CAN_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAN_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LeaveInitMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterInitMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_update_spt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[c9]"></a>CAN_SetRxMsg</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, can.o(i.CAN_SetRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN_SetRxMsg &rArr; CAN_SetRxMsgObj &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[d3]"></a>CAN_SetRxMsgObj</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, can.o(i.CAN_SetRxMsgObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CAN_SetRxMsgObj &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseIF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockIF_TL
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsg
</UL>

<P><STRONG><a name="[d4]"></a>CAN_SetTxMsg</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, can.o(i.CAN_SetTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_SetTxMsg &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseIF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockIF_TL
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[cc]"></a>CAN_Transmit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_Transmit &rArr; CAN_TriggerTxMsg &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TriggerTxMsg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxMsg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BasicSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Package_Tx
</UL>

<P><STRONG><a name="[d7]"></a>CAN_Transmit_ISP</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hal_can_isp.o(i.CAN_Transmit_ISP))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CAN_Transmit_ISP &rArr; CAN_Package_Tx &rArr; CAN_Transmit &rArr; CAN_TriggerTxMsg &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Package_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WRITE
</UL>

<P><STRONG><a name="[d6]"></a>CAN_TriggerTxMsg</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, can.o(i.CAN_TriggerTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_TriggerTxMsg &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseIF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockIF_TL
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[73]"></a>CAN_WRITE</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, isp_can_bus.o(i.CAN_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CAN_WRITE &rArr; CAN_Transmit_ISP &rArr; CAN_Package_Tx &rArr; CAN_Transmit &rArr; CAN_TriggerTxMsg &rArr; LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_ISP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>Checksum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isp_cmd.o(i.Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[d8]"></a>Checksum_up</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isp_can_bus.o(i.Checksum_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Checksum_up
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WRITE
</UL>

<P><STRONG><a name="[67]"></a>CmdFWVersion</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, isp_cmd.o(i.CmdFWVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CmdFWVersion &rArr; RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[6a]"></a>CmdGetConfig</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, isp_cmd.o(i.CmdGetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CmdGetConfig &rArr; RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[68]"></a>CmdGetDeviceID</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, isp_cmd.o(i.CmdGetDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CmdGetDeviceID &rArr; RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[69]"></a>CmdGetFlashMode</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, isp_cmd.o(i.CmdGetFlashMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CmdGetFlashMode &rArr; RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[6d]"></a>CmdRunAPROM</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, isp_cmd.o(i.CmdRunAPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdRunAPROM &rArr; SendData &rArr; io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[6c]"></a>CmdRunLDROM</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, isp_cmd.o(i.CmdRunLDROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdRunLDROM &rArr; SendData &rArr; io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[66]"></a>CmdSyncPackno</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, isp_cmd.o(i.CmdSyncPackno))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CmdSyncPackno &rArr; RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[6b]"></a>CmdUpdateConfig</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, isp_cmd.o(i.CmdUpdateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CmdUpdateConfig &rArr; RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[fa]"></a>FWVersion</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, isp_cmd.o(i.FWVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FWVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[df]"></a>GET_FILE_CHECKSUM</STRONG> (Thumb, 92 bytes, Stack size 1096 bytes, isp_file_access.o(i.GET_FILE_CHECKSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = GET_FILE_CHECKSUM &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
</UL>

<P><STRONG><a name="[e3]"></a>GET_FILE_SIZE</STRONG> (Thumb, 42 bytes, Stack size 576 bytes, isp_file_access.o(i.GET_FILE_SIZE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = GET_FILE_SIZE &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
</UL>

<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.GPC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>GetConfig</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, isp_cmd.o(i.GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[fb]"></a>GetDeviceID</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, isp_cmd.o(i.GetDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[fd]"></a>GetFlashMode</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, isp_cmd.o(i.GetFlashMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetFlashMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[13e]"></a>HSUSBD_CtrlIn</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, hsusbd.o(i.HSUSBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_CtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>HSUSBD_GetDescriptor</STRONG> (Thumb, 704 bytes, Stack size 20 bytes, hsusbd.o(i.HSUSBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
</UL>

<P><STRONG><a name="[171]"></a>HSUSBD_Open</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hsusbd.o(i.HSUSBD_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSUSBD_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>HSUSBD_PrepareCtrlIn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hsusbd.o(i.HSUSBD_PrepareCtrlIn))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ClassRequest
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_GetDescriptor
</UL>

<P><STRONG><a name="[e6]"></a>HSUSBD_ProcessSetupPacket</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hsusbd.o(i.HSUSBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HSUSBD_ProcessSetupPacket &rArr; HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HSUSBD_StandardRequest</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, hsusbd.o(i.HSUSBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_GetDescriptor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[176]"></a>HSUSBD_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hsusbd.o(i.HSUSBD_Start))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>HSUSBD_SwReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hsusbd.o(i.HSUSBD_SwReset))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>HSUSBD_UpdateDeviceState</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, hsusbd.o(i.HSUSBD_UpdateDeviceState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HSUSBD_UpdateDeviceState
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>I2C_Config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_i2c_bus.o(i.I2C_Config))
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>I2C_READ</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, isp_i2c_bus.o(i.I2C_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_READ &rArr; UI2C_ReadMultiBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI2C_ReadMultiBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>I2C_WRITE</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, isp_i2c_bus.o(i.I2C_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_WRITE &rArr; UI2C_WriteMultiBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI2C_WriteMultiBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ISP_Bridge_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isp_bridge.o(i.ISP_Bridge_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ISP_Bridge_Init &rArr; CAN_Init &rArr; CAN_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI2C0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>ISP_FLOW</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, main.o(i.ISP_FLOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = ISP_FLOW &rArr; Read_DATAFLASH_INFORMATION &rArr; GET_FILE_CHECKSUM &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ISP_command
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updated_Target_Flash
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNMOUNT_FILE_SYSTEM
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncPackno
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SN_INFORMATION
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_INTERFACE
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CONFIG_SDCARD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUNT_FILE_SYSTEM
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWVersion
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Detect_Connect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_error
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>ISP_UART_READ</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, isp_uart_bus.o(i.ISP_UART_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ISP_UART_READ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>ISP_UART_WRITE</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, isp_uart_bus.o(i.ISP_UART_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISP_UART_WRITE &rArr; UART_WriteMultiBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteMultiBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>MOUNT_FILE_SYSTEM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isp_file_access.o(i.MOUNT_FILE_SYSTEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = MOUNT_FILE_SYSTEM &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[103]"></a>MSC_AckCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, massstorage.o(i.MSC_AckCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSC_AckCmd &rArr; MSC_BulkIn
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_MemCopy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[106]"></a>MSC_ActiveDMA</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, massstorage.o(i.MSC_ActiveDMA))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>

<P><STRONG><a name="[105]"></a>MSC_BulkIn</STRONG> (Thumb, 216 bytes, Stack size 28 bytes, massstorage.o(i.MSC_BulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MSC_BulkIn
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ActiveDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_AckCmd
</UL>

<P><STRONG><a name="[107]"></a>MSC_BulkOut</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, massstorage.o(i.MSC_BulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSC_BulkOut
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ActiveDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[70]"></a>MSC_ClassRequest</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, massstorage.o(i.MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSC_ClassRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ResetDMA
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[109]"></a>MSC_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, massstorage.o(i.MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSC_Init &rArr; MSC_InitForHighSpeed &rArr; HSUSBD_ConfigEp
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpBufAddr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_InitForHighSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>MSC_InitForFullSpeed</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, massstorage.o(i.MSC_InitForFullSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSC_InitForFullSpeed &rArr; HSUSBD_ConfigEp
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpBufAddr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>MSC_InitForHighSpeed</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, massstorage.o(i.MSC_InitForHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSC_InitForHighSpeed &rArr; HSUSBD_ConfigEp
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpBufAddr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>MSC_ModeSense10</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, massstorage.o(i.MSC_ModeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MSC_ModeSense10 &rArr; MSC_BulkIn
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[10f]"></a>MSC_ModeSense6</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, massstorage.o(i.MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSC_ModeSense6 &rArr; MSC_BulkIn
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[110]"></a>MSC_ProcessCmd</STRONG> (Thumb, 1272 bytes, Stack size 24 bytes, massstorage.o(i.MSC_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MSC_ProcessCmd &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be32
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpStall
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_MemCopy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRead
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReceiveCBW
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_AckCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>MSC_ReadCapacity</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, massstorage.o(i.MSC_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSC_ReadCapacity &rArr; MSC_BulkIn
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[117]"></a>MSC_ReadFormatCapacity</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, massstorage.o(i.MSC_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSC_ReadFormatCapacity &rArr; MSC_BulkIn
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[111]"></a>MSC_ReceiveCBW</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, massstorage.o(i.MSC_ReceiveCBW))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[116]"></a>MSC_RequestSense</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, massstorage.o(i.MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSC_RequestSense &rArr; MSC_BulkIn
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[7f]"></a>RS485_Config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_rs485_bus.o(i.RS485_Config))
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>RS485_Init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, hal_rs485.o(i.RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_Bridge_Init
</UL>

<P><STRONG><a name="[7a]"></a>RS485_READ</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, isp_rs485_bus.o(i.RS485_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RS485_READ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>RS485_WRITE</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, isp_rs485_bus.o(i.RS485_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS485_WRITE &rArr; RS485_WriteMultiBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_WriteMultiBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>RS485_WriteMultiBytes</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_rs485.o(i.RS485_WriteMultiBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485_WriteMultiBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_WRITE
</UL>

<P><STRONG><a name="[de]"></a>RcvData</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, isp_cmd.o(i.RcvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_detect_command
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUpdateConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSyncPackno
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetFlashMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetDeviceID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFWVersion
</UL>

<P><STRONG><a name="[f0]"></a>Read_ARPOM_INFORMATION</STRONG> (Thumb, 156 bytes, Stack size 264 bytes, isp_file_access.o(i.Read_ARPOM_INFORMATION))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = Read_ARPOM_INFORMATION &rArr; GET_FILE_CHECKSUM &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_SIZE
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_CHECKSUM
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[f4]"></a>Read_CONFIG_SDCARD</STRONG> (Thumb, 130 bytes, Stack size 264 bytes, isp_file_access.o(i.Read_CONFIG_SDCARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = Read_CONFIG_SDCARD &rArr; f_ReadLine &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[f1]"></a>Read_DATAFLASH_INFORMATION</STRONG> (Thumb, 144 bytes, Stack size 264 bytes, isp_file_access.o(i.Read_DATAFLASH_INFORMATION))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = Read_DATAFLASH_INFORMATION &rArr; GET_FILE_CHECKSUM &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_SIZE
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_CHECKSUM
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[f3]"></a>Read_INTERFACE</STRONG> (Thumb, 240 bytes, Stack size 264 bytes, isp_file_access.o(i.Read_INTERFACE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = Read_INTERFACE &rArr; f_ReadLine &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[f2]"></a>Read_SN_INFORMATION</STRONG> (Thumb, 80 bytes, Stack size 272 bytes, isp_file_access.o(i.Read_SN_INFORMATION))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = Read_SN_INFORMATION &rArr; f_ReadLine &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[eb]"></a>SPI1_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, hal_spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI1_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_Bridge_Init
</UL>

<P><STRONG><a name="[132]"></a>SPI1_Read</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hal_spi.o(i.SPI1_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_READ
</UL>

<P><STRONG><a name="[133]"></a>SPI1_Write</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, hal_spi.o(i.SPI1_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI1_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WRITE
</UL>

<P><STRONG><a name="[11f]"></a>SPIM_Enable_4Bytes_Mode</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, spim.o(i.SPIM_Enable_4Bytes_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPIM_Enable_4Bytes_Mode &rArr; SPIM_Is4ByteModeEnable &rArr; SPIM_ReadJedecId &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Is4ByteModeEnable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_SPANSION_4Bytes_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[125]"></a>SPIM_EraseBlock</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, spim.o(i.SPIM_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPIM_EraseBlock &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_wait_write_done
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINBOND25X16A_EraseSector
</UL>

<P><STRONG><a name="[128]"></a>SPIM_IO_Read</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, spim.o(i.SPIM_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIM_IO_Read &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINBOND25X16A_ReadPage
</UL>

<P><STRONG><a name="[12b]"></a>SPIM_IO_Write</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, spim.o(i.SPIM_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINBOND25X16A_ProgramPage
</UL>

<P><STRONG><a name="[12d]"></a>SPIM_InitFlash</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, spim.o(i.SPIM_InitFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPIM_InitFlash &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_wait_write_done
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[124]"></a>SPIM_Is4ByteModeEnable</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, spim.o(i.SPIM_Is4ByteModeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPIM_Is4ByteModeEnable &rArr; SPIM_ReadJedecId &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister3
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadSecurityRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Enable_4Bytes_Mode
</UL>

<P><STRONG><a name="[120]"></a>SPIM_ReadJedecId</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spim.o(i.SPIM_ReadJedecId))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM_ReadJedecId &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_InitFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Enable_4Bytes_Mode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Is4ByteModeEnable
</UL>

<P><STRONG><a name="[7d]"></a>SPI_Config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_spi_bus.o(i.SPI_Config))
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>SPI_READ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, isp_spi_bus.o(i.SPI_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_READ &rArr; SPI1_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>SPI_WRITE</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, isp_spi_bus.o(i.SPI_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_WRITE &rArr; SPI1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>SYS_Init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>SendData</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isp_cmd.o(i.SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendData &rArr; io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_detect_command
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUpdateConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSyncPackno
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunLDROM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunAPROM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetFlashMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetDeviceID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFWVersion
</UL>

<P><STRONG><a name="[138]"></a>SpiInit</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, spim_spi_flash.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpiInit &rArr; SPIM_InitFlash &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_InitFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Enable_4Bytes_Mode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>SpiRead</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spim_spi_flash.o(i.SpiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SpiRead &rArr; WINBOND25X16A_ReadPage &rArr; SPIM_IO_Read &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINBOND25X16A_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[115]"></a>SpiWrite</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, spim_spi_flash.o(i.SpiWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINBOND25X16A_ProgramPage
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINBOND25X16A_EraseSector
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[f8]"></a>SyncPackno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isp_cmd.o(i.SyncPackno))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SyncPackno
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[94]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m480.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, system_m480.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_rs485.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, isp_uart_bus.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UART_Config</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, isp_uart_bus.o(i.UART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_driver.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>UART_WriteMultiBytes</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, isp_uart_bus.o(i.UART_WriteMultiBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_WriteMultiBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_UART_WRITE
</UL>

<P><STRONG><a name="[ec]"></a>UI2C0_Init</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, hal_usci_i2c.o(i.UI2C0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UI2C0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_Bridge_Init
</UL>

<P><STRONG><a name="[e8]"></a>UI2C_ReadMultiBytes</STRONG> (Thumb, 246 bytes, Stack size 28 bytes, usci_i2c.o(i.UI2C_ReadMultiBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UI2C_ReadMultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_READ
</UL>

<P><STRONG><a name="[e9]"></a>UI2C_WriteMultiBytes</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, usci_i2c.o(i.UI2C_WriteMultiBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UI2C_WriteMultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
</UL>

<P><STRONG><a name="[ff]"></a>UNMOUNT_FILE_SYSTEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isp_file_access.o(i.UNMOUNT_FILE_SYSTEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = UNMOUNT_FILE_SYSTEM &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[47]"></a>USBD20_IRQHandler</STRONG> (Thumb, 1088 bytes, Stack size 16 bytes, massstorage.o(i.USBD20_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD20_IRQHandler &rArr; HSUSBD_ProcessSetupPacket &rArr; HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ResetDMA
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_UpdateDeviceState
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SwReset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ProcessSetupPacket
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_CtrlIn
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_InitForHighSpeed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_InitForFullSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UpdatedTargetFalsh</STRONG> (Thumb, 720 bytes, Stack size 632 bytes, isp_cmd.o(i.UpdatedTargetFalsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = UpdatedTargetFalsh &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[fe]"></a>Updated_Target_Flash</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, isp_cmd.o(i.Updated_Target_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Updated_Target_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[13a]"></a>WINBOND25X16A_EraseSector</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spim_spi_flash.o(i.WINBOND25X16A_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WINBOND25X16A_EraseSector &rArr; SPIM_EraseBlock &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>

<P><STRONG><a name="[13b]"></a>WINBOND25X16A_ProgramPage</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, spim_spi_flash.o(i.WINBOND25X16A_ProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>

<P><STRONG><a name="[139]"></a>WINBOND25X16A_ReadPage</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, spim_spi_flash.o(i.WINBOND25X16A_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WINBOND25X16A_ReadPage &rArr; SPIM_IO_Read &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRead
</UL>

<P><STRONG><a name="[da]"></a>WordsCpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, isp_cmd.o(i.WordsCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WordsCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_detect_command
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUpdateConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSyncPackno
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunLDROM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunAPROM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetFlashMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetDeviceID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFWVersion
</UL>

<P><STRONG><a name="[141]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a4]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SN_INFORMATION
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_INTERFACE
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CONFIG_SDCARD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[1a5]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a6]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[143]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a7]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SN_INFORMATION
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CONFIG_SDCARD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
</UL>

<P><STRONG><a name="[1a8]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a9]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1ab]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ac]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6e]"></a>auto_detect_command</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, isp_cmd.o(i.auto_detect_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = auto_detect_command &rArr; RcvData &rArr; io_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_compare
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordsCpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isp_cmd.o(i.init_ISP_command)
</UL>
<P><STRONG><a name="[f9]"></a>check_error</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.check_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_error &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[15b]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[16f]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[179]"></a>disk_ioctl</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[160]"></a>disk_read</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = disk_read &rArr; SpiRead &rArr; WINBOND25X16A_ReadPage &rArr; SPIM_IO_Read &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[16e]"></a>disk_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[161]"></a>disk_write</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[11c]"></a>f_ReadLine</STRONG> (Thumb, 90 bytes, Stack size 576 bytes, isp_file_access.o(i.f_ReadLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = f_ReadLine &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SN_INFORMATION
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_INTERFACE
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DATAFLASH_INFORMATION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CONFIG_SDCARD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ARPOM_INFORMATION
</UL>

<P><STRONG><a name="[e2]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_SIZE
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_CHECKSUM
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
</UL>

<P><STRONG><a name="[162]"></a>f_gets</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
</UL>

<P><STRONG><a name="[102]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNMOUNT_FILE_SYSTEM
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUNT_FILE_SYSTEM
</UL>

<P><STRONG><a name="[e0]"></a>f_open</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_ReadLine
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_SIZE
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_CHECKSUM
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
</UL>

<P><STRONG><a name="[e1]"></a>f_read</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FILE_CHECKSUM
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
</UL>

<P><STRONG><a name="[163]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[151]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[14c]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[14e]"></a>get_fat</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[168]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[f6]"></a>init_ISP_command</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, isp_cmd.o(i.init_ISP_command))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[f5]"></a>io_open</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, isp_driver.o(i.io_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = io_open &rArr; io_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
</UL>

<P><STRONG><a name="[11b]"></a>io_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, isp_driver.o(i.io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_read
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvData
</UL>

<P><STRONG><a name="[137]"></a>io_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, isp_driver.o(i.io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[60]"></a>main</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = main &rArr; ISP_FLOW &rArr; Read_DATAFLASH_INFORMATION &rArr; GET_FILE_CHECKSUM &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_SupplyTargetPower
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_Bridge_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_Start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_Open
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Idle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISP_FLOW
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[14f]"></a>put_fat</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[dc]"></a>str_compare</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, isp_driver.o(i.str_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_detect_command
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUpdateConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSyncPackno
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetFlashMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetDeviceID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFWVersion
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>CLK_SysTickDelay</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, isp_cmd.o(i.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_detect_command
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatedTargetFalsh
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUpdateConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSyncPackno
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunLDROM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRunAPROM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetFlashMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetDeviceID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGetConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFWVersion
</UL>

<P><STRONG><a name="[170]"></a>io_compare</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, isp_driver.o(i.io_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = io_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[13c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, isp_uart_bus.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteMultiBytes
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[119]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_rs485.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_WriteMultiBytes
</UL>

<P><STRONG><a name="[10d]"></a>HSUSBD_ConfigEp</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, massstorage.o(i.HSUSBD_ConfigEp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_InitForHighSpeed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_InitForFullSpeed
</UL>

<P><STRONG><a name="[104]"></a>HSUSBD_MemCopy</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, massstorage.o(i.HSUSBD_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_AckCmd
</UL>

<P><STRONG><a name="[108]"></a>HSUSBD_ResetDMA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, massstorage.o(i.HSUSBD_ResetDMA))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ClassRequest
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HSUSBD_SetEpBufAddr</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, massstorage.o(i.HSUSBD_SetEpBufAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_SetEpBufAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_InitForHighSpeed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_InitForFullSpeed
</UL>

<P><STRONG><a name="[112]"></a>HSUSBD_SetEpStall</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, massstorage.o(i.HSUSBD_SetEpStall))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[113]"></a>get_be32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, massstorage.o(i.get_be32))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ProcessCmd
</UL>

<P><STRONG><a name="[101]"></a>LockIF</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, can.o(i.LockIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LockIF
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockIF_TL
</UL>

<P><STRONG><a name="[c4]"></a>LockIF_TL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, can.o(i.LockIF_TL))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LockIF_TL &rArr; LockIF
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockIF
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CLR_INT_PENDING_BIT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TriggerTxMsg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxMsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
</UL>

<P><STRONG><a name="[c5]"></a>ReleaseIF</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, can.o(i.ReleaseIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReleaseIF
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CLR_INT_PENDING_BIT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TriggerTxMsg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxMsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
</UL>

<P><STRONG><a name="[d1]"></a>can_update_spt</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, can.o(i.can_update_spt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_update_spt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[149]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[152]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[16c]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[14b]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[14d]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[150]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[154]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[157]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[156]"></a>dir_next</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[15c]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[155]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[166]"></a>find_volume</STRONG> (Thumb, 886 bytes, Stack size 80 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[15f]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[167]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[15e]"></a>gen_numname</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[165]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[169]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[159]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[15d]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[153]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[14a]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[16b]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[16a]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[158]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[16d]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[15a]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sync_window &rArr; disk_write &rArr; SpiWrite &rArr; WINBOND25X16A_ProgramPage &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[164]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[a5]"></a>CLK_SysTickDelay(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, easyscale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteStart()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteLogic0()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteLogic1()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyScale::WriteEOS()
</UL>

<P><STRONG><a name="[130]"></a>SPIM_ReadSecurityRegister</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spim.o(i.SPIM_ReadSecurityRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM_ReadSecurityRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Is4ByteModeEnable
</UL>

<P><STRONG><a name="[131]"></a>SPIM_ReadStatusRegister</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spim.o(i.SPIM_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_is_write_done
</UL>

<P><STRONG><a name="[12f]"></a>SPIM_ReadStatusRegister3</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spim.o(i.SPIM_ReadStatusRegister3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM_ReadStatusRegister3 &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Is4ByteModeEnable
</UL>

<P><STRONG><a name="[121]"></a>SPIM_SPANSION_4Bytes_Enable</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, spim.o(i.SPIM_SPANSION_4Bytes_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM_SPANSION_4Bytes_Enable &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Enable_4Bytes_Mode
</UL>

<P><STRONG><a name="[12c]"></a>SPIM_WriteInPageDataByIo</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, spim.o(i.SPIM_WriteInPageDataByIo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_wait_write_done
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Write
</UL>

<P><STRONG><a name="[12e]"></a>SPIM_WriteStatusRegister</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, spim.o(i.SPIM_WriteStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM_WriteStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_InitFlash
</UL>

<P><STRONG><a name="[129]"></a>SwitchNBitInput</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, spim.o(i.SwitchNBitInput))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_SPANSION_4Bytes_Enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadSecurityRegister
</UL>

<P><STRONG><a name="[122]"></a>SwitchNBitOutput</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, spim.o(i.SwitchNBitOutput))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Enable_4Bytes_Mode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteStatusRegister
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_SPANSION_4Bytes_Enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadSecurityRegister
</UL>

<P><STRONG><a name="[177]"></a>spim_is_write_done</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spim.o(i.spim_is_write_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_wait_write_done
</UL>

<P><STRONG><a name="[12a]"></a>spim_read</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, spim.o(i.spim_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spim_read
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_SPANSION_4Bytes_Enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadSecurityRegister
</UL>

<P><STRONG><a name="[126]"></a>spim_set_write_enable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spim.o(i.spim_set_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spim_set_write_enable &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_InitFlash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
</UL>

<P><STRONG><a name="[127]"></a>spim_wait_write_done</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spim.o(i.spim_wait_write_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_is_write_done
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_InitFlash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
</UL>

<P><STRONG><a name="[123]"></a>spim_write</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, spim.o(i.spim_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadJedecId
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_InitFlash
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_Enable_4Bytes_Mode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteStatusRegister
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_SPANSION_4Bytes_Enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadSecurityRegister
</UL>

<P><STRONG><a name="[144]"></a>_fp_digits</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[142]"></a>_printf_core</STRONG> (Thumb, 1782 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[147]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[146]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[81]"></a>stackDump</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[82]"></a>SendChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
